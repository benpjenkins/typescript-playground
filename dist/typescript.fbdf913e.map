{"version":3,"sources":["index.ts"],"names":["Object","defineProperty","exports","value","isOpen","myName","myAge","teachingFellows","me","Job","job","TeachingFellow","phone","numPhones","sayWord","word","console","log","sayWordOptional","sayWordDefault","newName","newNameTwo","newUnion","newUnionTwo","makeMargin","x","dog","undefined","cat","sayName","_a","name","age","sayName2","Type","Quiz","createContent","contentType","Type2","createContent2","Team","teamName","prototype","score","avalanche"],"mappings":"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","file":"typescript.fbdf913e.map","sourceRoot":"..","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar isOpen = false;\nvar myName = \"Ben\";\nvar myAge = 31;\nvar teachingFellows = [\"Ben\", \"Russel\", \"Madi\", \"Tom\"];\nvar me = [\"Ben\", 31];\nvar Job;\n(function (Job) {\n    Job[Job[\"Instructor\"] = 0] = \"Instructor\";\n    Job[Job[\"TeachingFellow\"] = 1] = \"TeachingFellow\";\n    Job[Job[\"Brett\"] = 2] = \"Brett\";\n})(Job || (Job = {}));\nvar job = Job.TeachingFellow;\nvar phone = \"iPhone\";\nvar numPhones = 1;\n//Functions in Typescript\nvar sayWord = function (word) {\n    console.log(word);\n    return;\n};\nsayWord(\"Ben\");\n//Optional Parameters\nvar sayWordOptional = function (word) {\n    console.log(word || \"Hello\");\n    return word || \"Hello\";\n};\nsayWordOptional();\n//'Hello'\n//Default Params\nvar sayWordDefault = function (word) {\n    if (word === void 0) { word = \"Hi\"; }\n    console.log(word);\n    return word;\n};\nsayWordDefault();\n//'Hi\"\n//Implicit Types\nvar newName = \"Ben\";\n//typescript can infer that this is a string.\n//this is the same as newName: string = 'Ben';\nnewName = \"Aaron\";\nnewName = 10;\n//newName was implicitly typed as a string so it can't be assigned a number\nvar newNameTwo = newName;\nnewNameTwo = 10;\n//newNameTwo is implicitly typed as a string because newName was initialized as a string.\n//Inferred types even work with variables\n//Union Types\nvar newUnion = 13;\nnewUnion = \"Ben\";\n// newUnion = true;\n//uncomment the line above me to fix newUnionTwo;\nvar newUnionTwo = newUnion;\nnewUnionTwo = true;\n//newUnion was never a boolean so newUnionTwo can't either\n//Union Types with functions\nvar makeMargin = function (x) {\n    return \"margin: \" + x + \"px\";\n};\n//we don't care if x is a number or string because it will result in the same output in this case\nmakeMargin(10);\nmakeMargin(\"10\");\nmakeMargin(false);\n//One of these is not like the other\n//Null types\nvar dog = null;\ndog = \"Belle\";\ndog = undefined;\ndog = null;\ndog = 4;\ndog = true;\n//Most types in Typescript also implicitly have null and undefined types.  See how dog doesn't throw an error when initialized as type: string with value null.  Changing it to a new string is fine, as is changing back to null.  Chaning it to a number or boolean is a problem.\n//Null and undefined are automatically added to other types\n//What if I don't want cat to be able to be undefined?\nvar cat = null;\ncat = \"Belle\";\ncat = undefined;\ncat = null;\ncat = 4;\ncat = true;\n//Interfaces - type checking for data that has a certain shape (it should seem like GraphQL)\n// the question mark on age makes it optional\nvar sayName = function (_a) {\n    var name = _a.name, age = _a.age;\n    console.log(name);\n    return name;\n};\n//the order matters here, javascript devs are used to order mattering\nsayName({ name: \"Ben\", age: 31 });\nsayName({ age: 31, name: \"Ben\" });\nsayName({ name: \"Ben\" });\n//the interface can replace named parameters\n//interfaces can be used for both the arguments and the return value;\nvar sayName2 = function (_a) {\n    var name = _a.name, age = _a.age;\n    console.log(\"name: \", name, \"age: \", age);\n    return { name: name, age: age };\n};\nsayName2({ name: \"Ben\", age: 31 });\nsayName2({ age: 31, name: \"Ben\" });\n//Enums\n//an Enum is it's own type\n//Typescript has numeric and string based enums\n//Numeric Enum\nvar Type;\n(function (Type) {\n    Type[Type[\"Video\"] = 0] = \"Video\";\n    Type[Type[\"Blog\"] = 1] = \"Blog\";\n    Type[Type[\"Quiz\"] = 2] = \"Quiz\"; //2\n})(Type || (Type = {}));\nconsole.log(\"Type.Quiz: \", Type.Quiz);\n//Type.Quiz === 2;\n//This enum has indexes like an array\nvar createContent = function (contentType) { };\ncreateContent(\"Video\");\n//Video !== 'Video';\n//String Enum\nvar Type2;\n(function (Type2) {\n    Type2[\"Video\"] = \"VIDEO\";\n    Type2[\"BlogPost\"] = \"BLOG_POST\";\n    Type2[\"Quiz\"] = \"QUIZ\";\n})(Type2 || (Type2 = {}));\nvar createContent2 = function (contentType) { };\ncreateContent2(Type2.Quiz);\nconsole.log(\"Type2.Quiz: \", Type2.Quiz);\n//Not Going to work\ncreateContent2(\"VIDEO\");\n//Classes in Typescript\nvar Team = /** @class */ (function () {\n    function Team(teamName) {\n        this.teamName = teamName;\n    }\n    Team.prototype.score = function () {\n        console.log(\"GOOOOOOAL\");\n        return \"Goal!\";\n    };\n    return Team;\n}());\nvar avalanche = new Team(\"Avalanche\");\navalanche.score();\nconsole.log(avalanche.teamName);\n//private variables prevent use outside of the class\n//if it is not explicitly private or public then it will implicitly be public\n//readonly will make it assignable either when it is defined or in the constructor\n//getters and setters\n//Modules\n"]}